# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ec2-fzf

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
    bucket: ec2-cache.binaris.com

provider:
  name: aws
  runtime: python2.7
  timeout: 30
  memorySize: 128

# you can overwrite defaults here
  stage: prod
  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::${self:custom.bucket}*"
    - Effect: "Allow"
      Action:
        - "s3:ListAllMyBuckets"
      Resource: "arn:aws:s3:::*"
    - Effect: "Allow"
      Action:
          - "ec2:DescribeRegions"
          - "ec2:DescribeInstances"
      Resource: "*"

# you can define service wide environment variables here

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  discover_instances:
    handler: handler.main
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
    environment:
        bucket: ${self:custom.bucket}

# you can add CloudFormation resource templates here
resources:
  Resources:
    CacheBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: ${self:custom.bucket}
    DeveloperBucketAccess:
      Type: AWS::IAM::Policy
      Properties:
          Groups: ["dev"]
          PolicyName: devs-can-read-ec2-fzf-bucket
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                      - s3:GetObject
                      - s3:ListBucket
                  Resource: "arn:aws:s3:::${self:custom.bucket}*"
